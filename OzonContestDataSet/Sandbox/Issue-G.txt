G. Многомодульный проект (25 баллов)
ограничение по времени на тест 5 секунд
ограничение по памяти на тест 256 мегабайт
ввод стандартный ввод
вывод стандартный вывод
Проект состоит из n модулей, для каждого известен список его зависимостей. Рассмотрим пример:

web: model commons
model: database utils
commons: utils json
api: model commons
database:
utils:
json:
В этом проекте n=7 модулей. Например, модуль model зависит от модулей database и utils, а модули database, utils и json не зависят от других модулей.

В настоящий момент все модули не собраны (не скомпилированы).

Вам необходимо реализовать небольшую функциональность минималистичной системы сборки. При запросе собрать некоторый модуль система должна собрать все необходимые для этого модули в правильном порядке. Порядок называется правильным, если при сборке любого модуля все модули от которых он зависит уже собраны.

Например, если в примере надо собрать модуль web, то необходимо до непосредственно сборки web собрать и model, и commons. Однако до сборки model надо сначала собрать database и utils, а до сборки commons надо собрать utils и json.

Таким образом, модули можно собрать в таком порядке: json, utils, commons, database, model, web. Это один из нескольких правильных порядков.

Если модуль уже собран, то собирать его зависимости (или его самого) повторно не надо. Например, если после web собрать api, то достаточно просто непосредственно собрать модуль api  — все его зависимости уже собраны.

Известно, что циклических зависимостей между модулями нет.

Вам задана структура многомодульного проекта и запросы на сборку модулей в хронологическом порядке. До обработки запросов все модули не собраны.

Обработайте все запросы. Для каждого запроса надо вывести список модулей для сборки в правильном порядке. Если таких порядков несколько, то вывести любой из них.

Неполные решения этой задачи (например, недостаточно эффективные) могут быть оценены частичным баллом.

Входные данные
В первой строке записано целое число t (1≤t≤100) — количество наборов входных данных. Далее следуют описания наборов. В тесте перед каждым из них записана пустая строка.

Набор начинается строкой, которая содержит число n (1≤n≤100) — количество модулей в проекте. Далее следуют описания модулей, по одному в строке. Каждое описание имеет вид модуль: зависимость_1 зависимость_2 ... зависимость_k. Всюду для разделения используются единичные пробелы. Если зависимостей нет, то после двоеточия пробела нет. Модули даны в произвольном порядке. В каждой строке все перечисленные модули — различны.

Гарантируется, что структура проекта задана полно (все модули описаны), не имеет циклических зависимостей. Название каждого модуля состоит из строчных латинских букв и имеет длину от 1 до 8.

Потом следует строка, которая содержит целое число q (1≤q≤100) — количество запросов на компиляцию модуля. В следующих строках записаны запросы в хронологическом порядке — по одному названию модуля в строке. Гарантируется, что в каждой строке в самом деле записан модуль системы. Возможно, что один модуль записан многократно (значит, при повторной его сборке ничего собирать уже не надо).

Выходные данные
Для каждого набора входных данных выведите q строк — ответы для каждого из запросов. Каждая строка должна иметь вид: «x модуль_1 модуль_2 ... модуль_x», где x — количество модулей сколько надо собрать и сами модули в правильном порядке.

После окончания вывода ответа на набор входных данных выведите пустую строку.

Пример
входные данные
2

7
web: model commons
model: database utils
commons: utils json
api: model commons
database:
utils:
json:
4
web
api
web
commons

11
tcp: util
app: api widgets
api: model rest
widgets: json
admin: db widgets
model: db json util
db:
json: util
util:
rest: tcp
tools:
6
rest
widgets
app
admin
tools
rest
выходные данные
6 json utils commons database model web
1 api
0
0

3 util tcp rest
2 json widgets
4 db model api app
1 admin
1 tools
0